{"/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/test.js":"/* istanbul instrument in package npmtest_gulp_ngdocs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/lib.npmtest_gulp_ngdocs.js":"/* istanbul instrument in package npmtest_gulp_ngdocs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_ngdocs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_ngdocs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-ngdocs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_ngdocs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_ngdocs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_ngdocs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_ngdocs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_ngdocs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_ngdocs.__dirname + '/lib.npmtest_gulp_ngdocs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/node_modules/gulp-ngdocs/index.js":"'use strict';\n\nvar dom = require('./src/dom');\nvar ngdoc = require('./src/ngdoc');\nvar reader = require('./src/reader');\n\nvar fs = require('fs');\nvar vfs = require('vinyl-fs');\nvar through2 = require('through2');\nvar extend = require('extend');\nvar _ = require('lodash');\nvar gutil = require('gulp-util');\nvar File = gutil.File;\nvar PluginError = gutil.PluginError;\nvar path = require('canonical-path');\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar decoder = new StringDecoder('utf8');\nvar merge = require('merge-stream');\n\nvar setup = {sections: {}, pages: [], apis: {}};\nvar fakeDest = '_FAKE_DEST_';\nvar templates = path.resolve(__dirname, 'src/templates');\nvar nodeModules = path.resolve(__dirname, 'node_modules');\nvar flattenedNodeModules = path.resolve(__dirname, '../');\n\nfunction copyTemplates() {\n  return function () {\n    return vfs.src(['**/*', '!**/*.tmpl'], {cwd: templates});\n  };\n}\n\nfunction streamFile(src, dir, dest, name) {\n  return function () {\n    return vfs.src(src).pipe(through2.obj(function (file, enc, callback) {\n      name = name === undefined ? path.normalize(file.path).split('/').pop() : name;\n      this.push(new File({\n        base: dest,\n        cwd: dest,\n        path: path.join(dest, dir, name),\n        contents: file.contents\n      }));\n      callback(null);\n    }));\n  };\n}\n\nfunction sections(sects) {\n  return merge(_.map(sects, function (data, key) {\n    if (data instanceof String) {\n      data = {glob: data};\n    }\n    if (!data.hasOwnProperty('glob')) {\n      throw new PluginError('gulp-ngdocs', 'Invalid sections, please refer to the documentation.');\n    }\n    if (!data.hasOwnProperty('title')) {\n      data.title = key;\n    }\n    if (!data.hasOwnProperty('api')) {\n      data.api = true;\n    }\n    var glob = data.glob;\n    var opts = data.globOpts;\n    setup.sections[key] = data.title;\n    setup.apis[key] = data.api;\n    return vfs.src(glob, opts)\n      .pipe(through2.obj(\n        function (file, enc, cb) {\n          file.section = key;\n          this.push(file);\n          cb(null);\n        }\n      ));\n    }));\n}\n\nfunction processDoc(opts) {\n  opts = opts || {};\n\n  var options = extend({\n    startPage: '/api',\n    scripts: [],\n    styles: [],\n    title: 'API Documentation',\n    html5Mode: true,\n    editExample: true,\n    navTemplate: false,\n    navContent: '',\n    navTemplateData: {}\n  }, opts);\n\n  setup.pages = [];\n  //Extend loadDefaults\n  options.loadDefaults = extend({\n      angular: true,\n      angularAnimate: true,\n      marked: true\n    }, opts.loadDefaults);\n\n  if (options.scripts && !(options.scripts instanceof Array)) {\n    options.scripts = [options.scripts];\n  }\n  if (options.styles && !(options.styles instanceof Array)) {\n    options.styles = [options.styles];\n  }\n  var defaultSection = 'api';\n  var defaultScripts = [];\n\n  //Default root paths for scripts\n  var scriptPaths = {\n    angular : [\n      'angular/angular.min.js',\n      'angular/angular.min.js.map'\n    ],\n    angularAnimate: [\n      'angular-animate/angular-animate.min.js',\n      'angular-animate/angular-animate.min.js.map'\n    ],\n    marked: [\n      'marked/lib/marked.js'\n    ]\n  };\n\n  //Sets default script paths\n  function joinNodeModules(jsPaths){\n    _.each(jsPaths, function(jsPath){\n      var libPath = path.join(nodeModules, jsPath),\n          flattenedLibPath = path.join(flattenedNodeModules, jsPath);\n\n      if (fs.existsSync(libPath)) {\n        defaultScripts.push(libPath);\n      } else if (fs.existsSync(flattenedLibPath)) {\n        defaultScripts.push(flattenedLibPath);\n      } else {\n        console.error('Could not find ' + jsPath);\n      }\n    });\n  }\n  //Iterate and checks to join paths\n  _.each(scriptPaths, function(paths, key){\n    if(options.loadDefaults[key])\n      joinNodeModules(paths);\n  });\n\n  function writeSetup() {\n    var options = setup.__options,\n        content, data = {\n          scripts: options.scripts,\n          styles: options.styles,\n          sections: _.keys(setup.sections).join('|'),\n          discussions: options.discussions,\n          analytics: options.analytics,\n          navContent: options.navContent,\n          title: options.title,\n          image: options.image,\n          titleLink: options.titleLink,\n          imageLink: options.imageLink,\n          bestMatch: options.bestMatch,\n          deferLoad: !!options.deferLoad\n        };\n\n    // create index.html\n    var index = path.resolve(templates, 'index.tmpl');\n    if (options.template && path.resolve(options.template)) {\n      index = options.template;\n    }\n    content = fs.readFileSync(index, 'utf8');\n    content = _.template(content, data);\n    docsStream.push(new File({\n      base: fakeDest,\n      cwd: fakeDest,\n      path: path.join(fakeDest, 'index.html'),\n      contents: new Buffer(content, 'utf8')\n    }));\n    // create setup file\n    setup.html5Mode = options.html5Mode;\n    setup.editExample = options.editExample;\n    setup.startPage = options.startPage;\n    setup.discussions = options.discussions;\n    setup.scripts = options.scripts;\n    docsStream.push(new File({\n      base: fakeDest,\n      cwd: fakeDest,\n      path: setup.__file,\n      contents: new Buffer('NG_DOCS=' + JSON.stringify(setup, null, 2) + ';', 'utf8')\n    }));\n  }\n\n  function transformFunction (file, enc, callback) {\n    if (file.isNull()) {\n      callback(null);\n      return; // ignore\n    }\n    if (file.isStream()) {\n      callback(new gutil.PluginError('gulp-ngdocs', 'Streaming not supported'));\n      return;\n    }\n    if (file.contents) {\n      if (!merged) {\n        merged = merge(fstreams.map(function (f) {\n          var s = f();\n          s.on('data', function (file) {\n            docsStream.push(file);\n          });\n          return s;\n        }));\n\n        merged.on('end', function () {\n          mergedEnded = true;\n          if (docsStreamEndCb) {\n            docsStreamEndCb(null);\n          }\n        });\n      }\n      var content = decoder.write(file.contents);\n      if (!file.section) {\n        file.section = defaultSection;\n      }\n      reader.process(content, file.path, file.section, options);\n    }\n    callback(null);\n  }\n\n  function flushFunction (cb) {\n    if (merged) {\n      docsStreamEndCb = cb;\n      // IMPORTANT: If you do not want an error here to destroy a gulp watch,\n      // see: http://stackoverflow.com/questions/23971388/prevent-errors-from-breaking-crashing-gulp-watch\n      try{\n        ngdoc.merge(reader.docs);\n        reader.docs.forEach(function(doc){\n          try {\n            // this hack is here because on OSX angular.module and angular.Module map to the same file.\n            var id = doc.id.replace('angular.Module', 'angular.IModule').replace(':', '.'),\n                file = path.join(fakeDest, 'partials', doc.section, id + '.html'),\n                dir = path.join(fakeDest, 'partials', doc.section);\n            docsStream.push(new File({\n              base: fakeDest,\n              cwd: fakeDest,\n              path: file,\n              contents: new Buffer(doc.html(), 'utf8')\n            }));\n          } catch (docError) {\n            var cause = docError.name + ': ' + docError.message,\n                placement = doc.file + ':' + doc.line,\n                message = cause + ' at ' + placement;\n            throw new Error(message);\n          }\n        });\n\n        ngdoc.checkBrokenLinks(reader.docs, setup.apis, options);\n\n        setup.pages = _.union(setup.pages, ngdoc.metadata(reader.docs));\n      } catch (flushError) {\n        console.log(flushError);\n        cb(flushError);\n      }\n      writeSetup(this);\n\n      if (mergedEnded) {\n        docsStreamEndCb(null);\n        docsStreamEndCb = false;\n      }\n    } else {\n      cb(null);\n    }\n  }\n\n  var fstreams = [];\n  var docsStream = through2.obj(transformFunction, flushFunction);\n  var merged = false;\n  var mergedEnded = false;\n  var docsStreamEndCb = false;\n  if (options.navTemplate) {\n    options.navContent = _.template(\n      fs.readFileSync(options.navTemplate, 'utf8'),\n      options.navTemplateData);\n  }\n\n  if (options.image) {\n    if (!/^((https?:)?\\/\\/|\\.\\.\\/)/.test(options.image)) {\n      fstreams.push(streamFile(options.image, 'img', fakeDest));\n      options.image = 'img/' + path.basename(options.image);\n    }\n  }\n\n  var scriptNames = [];\n  options.scripts = _.map(options.scripts, function (file) {\n    var fileName = path.normalize(file);\n    scriptNames.push(fileName);\n    if (/^((https?:)?\\/\\/)/.test(file)) {\n      return file;\n    } else {\n      fstreams.push(streamFile(file, path.join('js', path.dirname(fileName)), fakeDest));\n      return path.join('js', fileName);\n    }\n  });\n\n  _.forEach(defaultScripts, function (script, i) {\n    var fileName = path.normalize(script).split('/').pop();\n    if (scriptNames.indexOf(fileName) === -1) {\n      fstreams.push(streamFile(script, 'js', fakeDest));\n      options.scripts.splice(i, 0, path.join('js', fileName));\n    }\n  });\n\n  //Filter the maps\n  options.scripts = _.filter(options.scripts, function (file) {\n    return !(/^.*\\.map$/.test(file));\n  });\n\n  options.styles = _.map(options.styles, function(file) {\n      var fileName = path.normalize(file);\n    if (/^((https?:)?\\/\\/)/.test(file)) {\n      return file;\n    } else {\n      fstreams.push(streamFile(file, path.join('css', path.dirname(fileName)), fakeDest));\n      return path.join('css', fileName);\n    }\n  });\n\n  fstreams.push(copyTemplates(templates));\n  setup.__file = path.join(fakeDest, 'js/docs-setup.js');\n  setup.__options = options;\n\n  reader.docs = [];\n  if (Object.keys(setup.sections).length === 0) {\n    setup.sections[defaultSection] = options.title;\n    setup.apis[defaultSection] = true;\n  }\n\n  return docsStream;\n}\n\nmodule.exports = {\n  process: processDoc,\n  sections: sections\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/node_modules/gulp-ngdocs/src/dom.js":"/**\n * DOM generation class\n */\n\nexports.DOM = DOM;\nexports.htmlEscape = htmlEscape;\nexports.normalizeHeaderToId = normalizeHeaderToId;\n\n//////////////////////////////////////////////////////////\n\nfunction htmlEscape(text){\n  return text\n          .replace(/&/g, '&amp;')\n          .replace(/</g, '&lt;')\n          .replace(/>/g, '&gt;')\n          .replace(/\\{\\{/g, '<span>{{</span>')\n          .replace(/\\}\\}/g, '<span>}}</span>');\n}\n\nfunction nonEmpty(header) {\n  return !!header;\n}\n\nfunction idFromCurrentHeaders(headers) {\n  if (headers.length === 1) return headers[0];\n  // Do not include the first level title, as that's the title of the page.\n  return headers.slice(1).filter(nonEmpty).join('_');\n}\n\nfunction normalizeHeaderToId(header) {\n  if (typeof header !== 'string') {\n    return '';\n  }\n\n  return header.toLowerCase()\n      .replace(/<.*>/g, '')         // html tags\n      .replace(/[\\!\\?\\:\\.\\']/g, '') // special characters\n      .replace(/&#\\d\\d;/g, '')      // html entities\n      .replace(/\\(.*\\)/mg, '')      // stuff in parenthesis\n      .replace(/\\s$/, '')           // trailing spaces\n      .replace(/\\s+/g, '-');        // replace whitespaces with dashes\n}\n\n\nfunction DOM() {\n  this.out = [];\n  this.headingDepth = 0;\n  this.currentHeaders = [];\n  this.anchors = [];\n}\n\nvar INLINE_TAGS = {\n    i: true,\n    b: true,\n    a: true\n};\n\nDOM.prototype = {\n  toString: function() {\n    return this.out.join('');\n  },\n\n  text: function(content) {\n    if (typeof content == \"string\") {\n      this.out.push(htmlEscape(content));\n    } else if (typeof content == 'function') {\n      content.call(this, this);\n    } else if (content instanceof Array) {\n      this.ul(content);\n    }\n  },\n\n  html: function(html) {\n    if (!html) return;\n\n    var self = this;\n    // rewrite header levels, add ids and collect the ids\n    html = html.replace(/<h(\\d)(.*?)>([\\s\\S]+?)<\\/h\\1>/gm, function(_, level, attrs, content) {\n      level = parseInt(level, 10) + self.headingDepth; // change header level based on the context\n\n      self.currentHeaders[level - 1] = normalizeHeaderToId(content);\n      self.currentHeaders.length = level;\n\n      var id = idFromCurrentHeaders(self.currentHeaders);\n      self.anchors.push(id);\n      return '<h' + level + attrs + ' id=\"' + id + '\">' + content + '</h' + level + '>';\n    });\n\n    // collect anchors\n    html = html.replace(/<a name=\"(\\w*)\">/g, function(match, anchor) {\n      self.anchors.push(anchor);\n      return match;\n    });\n\n    this.out.push(html);\n  },\n\n  tag: function(name, attr, text) {\n    if (!text) {\n      text = attr;\n      attr = {};\n      if (name == 'code')\n        attr['ng:non-bindable'] = '';\n    }\n    this.out.push('<' + name);\n    for(var key in attr) {\n      this.out.push(\" \" + key + '=\"' + attr[key] + '\"');\n    }\n    this.out.push('>');\n    this.text(text);\n    this.out.push('</' + name + '>');\n    if (!INLINE_TAGS[name])\n      this.out.push('\\n');\n  },\n\n  code: function(text) {\n    this.tag('pre', {'class':\"prettyprint linenums\"}, text);\n  },\n\n  div: function(attr, text) {\n    this.tag('div', attr, text);\n  },\n\n  h: function(heading, content, fn){\n    if (content==undefined || (content instanceof Array && content.length == 0)) return;\n\n    this.headingDepth++;\n    this.currentHeaders[this.headingDepth - 1] = normalizeHeaderToId(heading);\n    this.currentHeaders.length = this.headingDepth;\n\n    var className = null,\n        anchor = null;\n    if (typeof heading == 'string') {\n      var id = idFromCurrentHeaders(this.currentHeaders);\n      this.anchors.push(id);\n      anchor = {'id': id};\n      var classNameValue = this.currentHeaders[this.headingDepth - 1]\n      if(classNameValue == 'hide') classNameValue = '';\n      className = {'class': classNameValue};\n    }\n    this.tag('h' + this.headingDepth, anchor, heading);\n    if (content instanceof Array) {\n      this.ul(content, className, fn);\n    } else if (fn) {\n      this.tag('div', className, function() {\n        fn.call(this, content);\n      });\n    } else {\n      this.tag('div', className, content);\n    }\n    this.headingDepth--;\n  },\n\n  h1: function(attr, text) {\n    this.tag('h1', attr, text);\n  },\n\n  h2: function(attr, text) {\n    this.tag('h2', attr, text);\n  },\n\n  h3: function(attr, text) {\n    this.tag('h3', attr, text);\n  },\n\n  p: function(attr, text) {\n    this.tag('p', attr, text);\n  },\n\n  ul: function(list, attr, fn) {\n    if (typeof attr == 'function') {\n      fn = attr;\n      attr = {};\n    }\n    this.tag('ul', attr, function(dom){\n      list.forEach(function(item){\n        dom.out.push('<li>');\n        dom.text(fn ? fn(item) : item);\n        dom.out.push('</li>\\n');\n      });\n    });\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/node_modules/gulp-ngdocs/src/ngdoc.js":"/**\n * All parsing/transformation code goes here. All code here should be sync to ease testing.\n */\nvar DOM = require('./dom.js').DOM;\nvar htmlEscape = require('./dom.js').htmlEscape;\nvar Example = require('./example.js').Example;\nvar NEW_LINE = /\\n\\r?/;\nvar globalID = 0;\nvar fs = require('fs');\nvar fspath = require('path');\nvar errorsJson;\nvar marked = require('marked');\nmarked.setOptions({\n  gfm: true,\n  tables: true\n});\n\nvar lookupMinerrMsg = function (doc) {\n  var code, namespace;\n\n  if (errorsJson === undefined) {\n    errorsJson = require(exports.errorFile).errors;\n  }\n\n  namespace = doc.getMinerrNamespace();\n  code = doc.getMinerrCode();\n  if (namespace === undefined) {\n    return errorsJson[code];\n  }\n  return errorsJson[namespace][code];\n};\n\nexports.trim = trim;\nexports.metadata = metadata;\nexports.scenarios = scenarios;\nexports.merge = merge;\nexports.checkBrokenLinks = checkBrokenLinks;\nexports.Doc = Doc;\n\nvar BOOLEAN_ATTR = {};\n['multiple', 'selected', 'checked', 'disabled', 'readOnly', 'required'].forEach(function(value) {\n  BOOLEAN_ATTR[value] = true;\n});\n\n//////////////////////////////////////////////////////////\nfunction Doc(text, file, line, options) {\n  if (typeof text == 'object') {\n    for ( var key in text) {\n      this[key] = text[key];\n    }\n  } else {\n    this.text = text;\n    this.file = file;\n    this.line = line;\n  }\n  this.options = options || {};\n  this.scenarios = this.scenarios || [];\n  this.requires = this.requires || [];\n  this.param = this.param || [];\n  this.properties = this.properties || [];\n  this.methods = this.methods || [];\n  this.events = this.events || [];\n  this.links = this.links || [];\n  this.anchors = this.anchors || [];\n}\nDoc.METADATA_IGNORE = (function() {\n  var words = fs.readFileSync(__dirname + '/ignore.words', 'utf8');\n  return words.toString().split(/[,\\s\\n\\r]+/gm);\n})();\n\n\nDoc.prototype = {\n  keywords: function keywords() {\n    var keywords = {};\n    var words = [];\n    Doc.METADATA_IGNORE.forEach(function(ignore){ keywords[ignore] = true; });\n\n    function extractWords(text) {\n      var tokens = text.toLowerCase().split(/[\\.\\s:,`'\"#]+/mg);\n      tokens.forEach(function(key){\n        var match = key.match(/^((ng:|[\\$_\\w])[\\w\\-_]+)/);\n        if (match){\n          key = match[1];\n          if (!keywords[key]) {\n            keywords[key] = true;\n            words.push(key);\n          }\n        }\n      });\n    }\n\n    extractWords(this.text);\n    this.properties.forEach(function(prop) {\n      extractWords(prop.text || prop.description || '');\n    });\n    this.methods.forEach(function(method) {\n      extractWords(method.text || method.description || '');\n    });\n    if (this.ngdoc === 'error') {\n      words.push(this.getMinerrNamespace());\n      words.push(this.getMinerrCode());\n    }\n    words.sort();\n    return words.join(' ');\n  },\n\n  shortDescription : function() {\n    if (!this.description) return this.description;\n    var text = this.description.split(\"\\n\")[0];\n    text = text.replace(/<.+?\\/?>/g, '');\n    text = text.replace(/{/g,'&#123;');\n    text = text.replace(/}/g,'&#125;');\n    return text;\n  },\n\n  getMinerrNamespace: function () {\n    if (this.ngdoc !== 'error') {\n      throw new Error('Tried to get the minErr namespace, but @ngdoc ' +\n        this.ngdoc + ' was supplied. It should be @ngdoc error');\n    }\n    return this.name.split(':')[0];\n  },\n\n  getMinerrCode: function () {\n    if (this.ngdoc !== 'error') {\n      throw new Error('Tried to get the minErr error code, but @ngdoc ' +\n        this.ngdoc + ' was supplied. It should be @ngdoc error');\n    }\n    return this.name.split(':')[1];\n  },\n\n  /**\n   * Converts relative urls (without section) into absolute\n   * Absolute url means url with section\n   *\n   * @example\n   * - if the link is inside any api doc:\n   * angular.widget -> api/angular.widget\n   *\n   * - if the link is inside any guid doc:\n   * intro -> guide/intro\n   *\n   * @param {string} url Absolute or relative url\n   * @returns {string} Absolute url\n   */\n  convertUrlToAbsolute: function(url) {\n    var prefix = this.options.html5Mode ? '' : '#/';\n    var hashIdx = url.indexOf('#');\n\n    // Lowercase hash parts of the links,\n    // so that we can keep correct API names even when the urls are lowercased.\n    if (hashIdx !== -1) {\n      url = url.substr(0, hashIdx) + url.substr(hashIdx).toLowerCase();\n    }\n\n    if (url.substr(-1) == '/') return prefix + url + 'index';\n    if (url.match(/\\//)) return prefix + url;\n    return prefix + this.section + '/' + url;\n  },\n\n  markdown: function(text) {\n    if (!text) return text;\n\n    var self = this,\n      IS_URL = /^(https?:\\/\\/|ftps?:\\/\\/|mailto:|\\.|\\/)/,\n      IS_ANGULAR = /^(api\\/)?(angular|ng|AUTO)\\./,\n      IS_HASH = /^#/,\n      parts = trim(text).split(/(```[+-]?[a-z]*[\\s\\S]*?```|<pre.*?>[\\s\\S]*?<\\/pre>|<doc:example(\\S*).*?>[\\s\\S]*?<\\/doc:example>|<example[^>]*>[\\s\\S]*?<\\/example>)/),\n      seq = 0,\n      placeholderMap = {};\n\n    function placeholder(text) {\n      var id = 'REPLACEME' + (seq++);\n      placeholderMap[id] = text;\n      return id;\n    }\n\n    function extractInlineDocCode(text, tag) {\n      if(tag == 'all') {\n        //use a greedy operator to match the last </docs> tag\n        regex = /\\/\\/<docs.*?>([.\\s\\S]+)\\/\\/<\\/docs>/im;\n      }\n      else {\n        //use a non-greedy operator to match the next </docs> tag\n        regex = new RegExp(\"\\/\\/<docs\\\\s*tag=\\\"\" + tag + \"\\\".*?>([.\\\\s\\\\S]+?)\\/\\/<\\/docs>\",\"im\");\n      }\n      var matches = regex.exec(text.toString());\n      return matches && matches.length > 1 ? matches[1] : \"\";\n    }\n\n    parts.forEach(function(text, i) {\n      parts[i] = (text || '').\n        replace(/<example(?:\\s+module=\"([^\"]*)\")?(?:\\s+deps=\"([^\"]*)\")?(\\s+animations=\"true\")?>([\\s\\S]*?)<\\/example>/gmi,\n          function(_, module, deps, animations, content) {\n\n          var example = new Example(self.scenarios);\n          if(animations) {\n            example.enableAnimations();\n            example.addDeps('angular-animate.js');\n          }\n\n          example.setModule(module);\n          example.addDeps(deps);\n          content.replace(/<file\\s+name=\"([^\"]*)\"\\s*>([\\s\\S]*?)<\\/file>/gmi, function(_, name, content) {\n            example.addSource(name, content);\n          });\n          content.replace(/<file\\s+src=\"([^\"]+)\"(?:\\s+tag=\"([^\"]+)\")?(?:\\s+name=\"([^\"]+)\")?\\s*\\/?>/gmi, function(_, file, tag, name) {\n            if(fs.existsSync(file)) {\n              var content = fs.readFileSync(file, 'utf8');\n              if(content && content.length > 0) {\n                if(tag && tag.length > 0) {\n                  content = extractInlineDocCode(content, tag);\n                }\n                name = name && name.length > 0 ? name : fspath.basename(file);\n                example.addSource(name, content);\n              }\n            }\n            return '';\n          })\n          return placeholder(example.toHtml());\n        }).\n        replace(/(?:\\*\\s+)?<file.+?src=\"([^\"]+)\"(?:\\s+tag=\"([^\"]+)\")?\\s*\\/?>/i, function(_, file, tag) {\n          if(fs.existsSync(file)) {\n            var content = fs.readFileSync(file, 'utf8');\n            if(tag && tag.length > 0) {\n              content = extractInlineDocCode(content, tag);\n            }\n            return content;\n          }\n        }).\n        replace(/^<doc:example(\\s+[^>]*)?>([\\s\\S]*)<\\/doc:example>/mi, function(_, attrs, content) {\n          var html, script, scenario,\n            example = new Example(self.scenarios);\n\n          example.setModule((attrs||'module=\"\"').match(/^\\s*module=[\"'](.*)[\"']\\s*$/)[1]);\n          content.\n            replace(/<doc:source(\\s+[^>]*)?>([\\s\\S]*)<\\/doc:source>/mi, function(_, attrs, content) {\n              example.addSource('index.html', content.\n                replace(/<script>([\\s\\S]*)<\\/script>/mi, function(_, script) {\n                  example.addSource('script.js', script);\n                  return '';\n                }).\n                replace(/<style>([\\s\\S]*)<\\/style>/mi, function(_, style) {\n                  example.addSource('style.css', style);\n                  return '';\n                })\n              );\n            }).\n            replace(/(<doc:scenario>)([\\s\\S]*)(<\\/doc:scenario>)/mi, function(_, before, content){\n              example.addSource('scenario.js', content);\n            });\n\n          return placeholder(example.toHtml());\n        }).\n        replace(/^<pre(.*?)>([\\s\\S]*?)<\\/pre>/mi, function(_, attrs, content){\n          return placeholder(\n            '<pre'+attrs+' class=\"prettyprint linenums\">' +\n              content.replace(/</g, '&lt;').replace(/>/g, '&gt;') +\n              '</pre>');\n        }).\n        replace(/<div([^>]*)><\\/div>/, '<div$1>\\n<\\/div>').\n        replace(/{@link\\s+([^\\s}]+)\\s*([^}]*?)\\s*}/g, function(_all, url, title){\n          var isFullUrl = url.match(IS_URL),\n            isAngular = url.match(IS_ANGULAR),\n            isHash = url.match(IS_HASH),\n            absUrl = isHash\n              ? url\n              : (isFullUrl ? url : self.convertUrlToAbsolute(url));\n\n          if (!isFullUrl) self.links.push(absUrl);\n\n          return '<a href=\"' + absUrl + '\">' +\n            (isAngular ? '<code>' : '') +\n            (title || url).replace(/^#/g, '').replace(/\\n/g, ' ') +\n            (isAngular ? '</code>' : '') +\n            '</a>';\n        }).\n        replace(/{@type\\s+(\\S+)(?:\\s+(\\S+))?}/g, function(_, type, url) {\n          url = url || '#';\n          return '<a href=\"' + url + '\" class=\"' + self.prepare_type_hint_class_name(type) + '\">' + type + '</a>';\n        }).\n        replace(/{@installModule\\s+(\\S+)?}/g, function(_, module) {\n          return explainModuleInstallation(module);\n        });\n\n      if(self.options.highlightCodeFences) {\n        parts[i] = parts[i].replace(/^```([+-]?)([a-z]*)([\\s\\S]*?)```/i, function(_, alert, type, content){\n          var tClass = 'prettyprint linenums';\n\n          // check if alert type is set - if true, add the corresponding\n          // bootstrap classes\n          if(alert) {\n            tClass += ' alert alert-' + (alert === '+' ? 'success' : 'danger');\n          }\n\n          // if type is set, add lang-* information for google code\n          // prettify - normally this is not necessary, because the prettifier\n          // tries to guess the language.\n          if(type) {\n            tClass += ' lang-' + type;\n          }\n\n          return placeholder(\n              '<pre class=\"' + tClass + '\">' +\n              content.replace(/</g, '&lt;').replace(/>/g, '&gt;') +\n              '</pre>');\n        });\n\n      }\n    });\n    text = parts.join('');\n\n    function prepareClassName(text) {\n      return text.toLowerCase().replace(/[_\\W]+/g, '-');\n    };\n\n    var pageClassName, suffix = '-page';\n    if(this.name) {\n      var split = this.name.match(/^\\s*(.+?)\\s*:\\s*(.+)/);\n      if(split && split.length > 1) {\n        var before = prepareClassName(split[1]);\n        var after = prepareClassName(split[2]);\n        pageClassName = before + suffix + ' ' + before + '-' + after + suffix;\n      }\n    }\n    pageClassName = pageClassName || prepareClassName(this.name || 'docs') + suffix;\n\n    text = '<div class=\"' + pageClassName + '\">' +\n             marked(text) +\n           '</div>';\n    text = text.replace(/(?:<p>)?(REPLACEME\\d+)(?:<\\/p>)?/g, function(_, id) {\n      return placeholderMap[id];\n    });\n\n    //!annotate CONTENT\n    //!annotate=\"REGEX\" CONTENT\n    //!annotate=\"REGEX\" TITLE|CONTENT\n    text = text.replace(/\\n?\\/\\/!annotate\\s*(?:=\\s*['\"](.+?)['\"])?\\s+(.+?)\\n\\s*(.+?\\n)/img,\n      function(_, pattern, content, line) {\n        var pattern = new RegExp(pattern || '.+');\n        var title, text, split = content.split(/\\|/);\n        if(split.length > 1) {\n          text = split[1];\n          title = split[0];\n        }\n        else {\n          title = 'Info';\n          text = content;\n        }\n        return \"\\n\" + line.replace(pattern, function(match) {\n          return '<div class=\"nocode nocode-content\" data-popover ' +\n                   'data-content=\"' + text + '\" ' +\n                   'data-title=\"' + title + '\">' +\n                      match +\n                 '</div>';\n        });\n      }\n    );\n\n    //!details /path/to/local/docs/file.html\n    //!details=\"REGEX\" /path/to/local/docs/file.html\n    text = text.replace(/\\/\\/!details\\s*(?:=\\s*['\"](.+?)['\"])?\\s+(.+?)\\n\\s*(.+?\\n)/img,\n      function(_, pattern, url, line) {\n        url = '/notes/' + url;\n        var pattern = new RegExp(pattern || '.+');\n        return line.replace(pattern, function(match) {\n          return '<div class=\"nocode nocode-content\" data-foldout data-url=\"' + url + '\">' + match + '</div>';\n        });\n      }\n    );\n\n    return text;\n  },\n\n  parse: function() {\n    var atName;\n    var atText;\n    var match;\n    var self = this;\n    self.text.split(NEW_LINE).forEach(function(line){\n      if ((match = line.match(/^\\s*@(\\w+)(\\s+(.*))?/))) {\n        // we found @name ...\n        // if we have existing name\n        flush();\n        atName = match[1];\n        atText = [];\n        if(match[3]) atText.push(match[3].trimRight());\n      } else {\n        if (atName) {\n          atText.push(line);\n        }\n      }\n    });\n    flush();\n    this.shortName = this.name ? this.name.split(/[\\.:#]/).pop().trim() : '';\n    this.id = this.id || // if we have an id just use it\n      (this.ngdoc === 'error' ? this.name : '') ||\n      (((this.file||'').match(/.*(\\/|\\\\)([^(\\/|\\\\)]*)\\.ngdoc/)||{})[2]) || // try to extract it from file name\n      this.name; // default to name\n    this.description = this.markdown(this.description);\n    this.example = this.markdown(this.example);\n    this['this'] = this.markdown(this['this']);\n    return this;\n\n    function flush() {\n      if (atName) {\n        var text = trim(atText.join('\\n')), match;\n        if (atName == 'module') {\n          match = text.match(/^\\s*(\\S+)\\s*$/);\n          if (match) {\n            self.moduleName = match[1];\n          }\n        } else if (atName == 'param') {\n          match = text.match(/^\\{([^}]+)\\}\\s+(([^\\s=]+)|\\[(\\S+)=([^\\]]+)\\])\\s+(.*)/);\n                             //  1      1    23       3   4   4 5      5  2   6  6\n          if (!match) {\n            throw new Error(\"Not a valid 'param' format: \" + text + ' (found in: ' + self.file + ':' + self.line + ')');\n          }\n\n          var optional = (match[1].slice(-1) === '=');\n          var param = {\n            name: match[4] || match[3],\n            description:self.markdown(text.replace(match[0], match[6])),\n            type: optional ? match[1].substring(0, match[1].length-1) : match[1],\n            optional: optional,\n            default: match[5]\n          };\n          // if param name is a part of an object passed to a method\n          // move it to a nested property of the parameter.\n          var dotIdx = param.name.indexOf(\".\");\n          if(dotIdx > 0){\n            param.isProperty = true;\n            var paramName = param.name.substr(0, dotIdx);\n            var propertyName = param.name.substr(dotIdx + 1);\n            param.name = propertyName;\n            var p = self.param.filter(function(p) { return p.name === paramName; })[0];\n            if (p) {\n              p.properties = p.properties || [];\n              p.properties.push(param);\n            }\n          } else {\n            self.param.push(param);\n          }\n        } else if (atName == 'returns' || atName == 'return') {\n          match = text.match(/^\\{([^}]+)\\}\\s+(.*)/);\n          if (!match) {\n            throw new Error(\"Not a valid 'returns' format: \" + text + ' (found in: ' + self.file + ':' + self.line + ')');\n          }\n          self.returns = {\n            type: match[1],\n            description: self.markdown(text.replace(match[0], match[2]))\n          };\n        } else if(atName == 'requires') {\n          match = text.match(/^([^\\s]*)\\s*([\\S\\s]*)/);\n          self.requires.push({\n            name: match[1],\n            text: self.markdown(match[2])\n          });\n        } else if(atName == 'property') {\n          match = text.match(/^\\{(\\S+)\\}\\s+(\\S+)(\\s+(.*))?/);\n          if (!match) {\n            throw new Error(\"Not a valid 'property' format: \" + text + ' (found in: ' + self.file + ':' + self.line + ')');\n          }\n          var property = new Doc({\n            type: match[1],\n            name: match[2],\n            shortName: match[2],\n            description: self.markdown(text.replace(match[0], match[4]))\n          });\n          self.properties.push(property);\n        } else if(atName == 'eventType') {\n          match = text.match(/(broadcast|emit)/);\n          self.type = match[1];\n        } else if(atName == 'constructor') {\n          self.constructor = true;\n        } else {\n          self[atName] = text;\n        }\n      }\n    }\n  },\n\n  html: function() {\n    var dom = new DOM(),\n      self = this,\n      minerrMsg;\n\n    var gitTagFromFullVersion = function(version) {\n      var match = version.match(/-(\\w{7})/);\n\n      if (match) {\n        // git sha\n        return match[1];\n      }\n\n      // git tag\n      return 'v' + version;\n    };\n\n    /*\n    if (this.section === 'api') {\n      dom.tag('a', {\n          href: 'http://github.com/angular/angular.js/tree/' +\n            gitTagFromFullVersion(gruntUtil.getVersion().full) + '/' + self.file + '#L' + self.line,\n          class: 'view-source btn btn-action' }, function(dom) {\n        dom.tag('i', {class:'icon-zoom-in'}, ' ');\n        dom.text(' View source');\n      });\n    }\n    dom.tag('a', {\n        href: 'http://github.com/angular/angular.js/edit/master/' + self.file,\n        class: 'improve-docs btn btn-primary' }, function(dom) {\n      dom.tag('i', {class:'icon-edit'}, ' ');\n      dom.text(' Improve this doc');\n    });\n    */\n    dom.h(title(this), function() {\n      notice('deprecated', 'Deprecated API', self.deprecated);\n      if (self.ngdoc === 'error') {\n        minerrMsg = lookupMinerrMsg(self);\n        dom.tag('pre', {\n          class:'minerr-errmsg',\n          'error-display': minerrMsg.replace(/\"/g, '&quot;')\n        }, minerrMsg);\n      }\n      if (self.ngdoc != 'overview') {\n        dom.h('Description', self.description, dom.html);\n      }\n      dom.h('Dependencies', self.requires, function(require){\n        dom.tag('code', function() {\n          var id = require.name[0] == '$' ? 'ng.' + require.name : require.name,\n              name = require.name.split(/[\\.:\\/]/).pop();\n          dom.tag('a', {href: self.convertUrlToAbsolute(id)}, name);\n        });\n        dom.html(require.text);\n      });\n\n      (self['html_usage_' + self.ngdoc] || function() {\n        throw new Error(\"Don't know how to format @ngdoc: \" + self.ngdoc);\n      }).call(self, dom);\n\n      dom.h('Example', self.example, dom.html);\n    });\n\n    self.anchors = dom.anchors;\n\n    return dom.toString();\n\n    //////////////////////////\n\n    function notice(name, legend, msg){\n      if (self[name] === undefined) return;\n      dom.tag('fieldset', {'class':name}, function(dom){\n        dom.tag('legend', legend);\n        dom.text(msg);\n      });\n    }\n\n  },\n\n  prepare_type_hint_class_name : function(type) {\n    var typeClass = type.toLowerCase().match(/^[-\\w]+/) || [];\n    typeClass = typeClass[0] ? typeClass[0] : 'object';\n    return 'label type-hint type-hint-' + typeClass;\n  },\n\n  html_usage_parameters: function(dom) {\n    var self = this;\n    var params = this.param ? this.param : [];\n    if(this.animations) {\n      dom.h('Animations', this.animations, function(animations){\n        dom.html('<ul>');\n        var animations = animations.split(\"\\n\");\n        animations.forEach(function(ani) {\n          dom.html('<li>');\n          dom.text(ani);\n          dom.html('</li>');\n        });\n        dom.html('</ul>');\n      });\n      // dom.html('<a href=\"api/ngAnimate.$animate\">Click here</a> to learn more about the steps involved in the animation.');\n    }\n    if(params.length > 0) {\n      dom.html('<h2>Parameters</h2>');\n      dom.html('<table class=\"variables-matrix table table-bordered table-striped\">');\n      dom.html('<thead>');\n      dom.html('<tr>');\n      dom.html('<th>Param</th>');\n      dom.html('<th>Type</th>');\n      dom.html('<th>Details</th>');\n      dom.html('</tr>');\n      dom.html('</thead>');\n      dom.html('<tbody>');\n      processParams(params);\n      function processParams(params) {\n        for(var i=0;i<params.length;i++) {\n          param = params[i];\n          var name = param.name;\n          var types = param.type;\n          if(types[0]=='(') {\n            types = types.substr(1);\n          }\n\n          var limit = types.length - 1;\n          if(types.charAt(limit) == ')' && types.charAt(limit-1) != '(') {\n            types = types.substr(0,limit);\n          }\n          types = types.split(/\\|(?![\\(\\)\\w\\|\\s]+>)/);\n          if (param.optional) {\n            name += ' <div><em>(optional)</em></div>';\n          }\n          dom.html('<tr>');\n          dom.html('<td>' + name + '</td>');\n          dom.html('<td>');\n          for(var j=0;j<types.length;j++) {\n            var type = types[j];\n            dom.html('<a href=\"\" class=\"' + self.prepare_type_hint_class_name(type) + '\">');\n            dom.text(type);\n            dom.html('</a>');\n          }\n\n          dom.html('</td>');\n          dom.html('<td>');\n          dom.html(param.description);\n          if (param.default) {\n            dom.html(' <p><em>(default: ' + param.default + ')</em></p>');\n          }\n          if (param.properties) {\n//            dom.html('<table class=\"variables-matrix table table-bordered table-striped\">');\n            dom.html('<table>');\n            dom.html('<thead>');\n            dom.html('<tr>');\n            dom.html('<th>Property</th>');\n            dom.html('<th>Type</th>');\n            dom.html('<th>Details</th>');\n            dom.html('</tr>');\n            dom.html('</thead>');\n            dom.html('<tbody>');\n            processParams(param.properties);\n            dom.html('</tbody>');\n            dom.html('</table>');\n          }\n          dom.html('</td>');\n          dom.html('</tr>');\n        };\n      }\n      dom.html('</tbody>');\n      dom.html('</table>');\n    }\n  },\n\n  html_usage_returns: function(dom) {\n    var self = this;\n    if (self.returns) {\n      dom.html('<h2>Returns</h2>');\n      dom.html('<table class=\"variables-matrix\">');\n      dom.html('<tr>');\n      dom.html('<td>');\n      dom.html('<a href=\"\" class=\"' + self.prepare_type_hint_class_name(self.returns.type) + '\">');\n      dom.text(self.returns.type);\n      dom.html('</a>');\n      dom.html('</td>');\n      dom.html('<td>');\n      dom.html(self.returns.description);\n      dom.html('</td>');\n      dom.html('</tr>');\n      dom.html('</table>');\n    }\n  },\n\n  html_usage_this: function(dom) {\n    var self = this;\n    if (self['this']) {\n      dom.h(function(dom){\n        dom.html(\"Method's <code>this</code>\");\n      }, function(dom){\n        dom.html(self['this']);\n      });\n    }\n  },\n\n  html_usage_function: function(dom){\n    var self = this;\n    var name = self.name.match(/^angular(\\.mock)?\\.(\\w+)$/) ? self.name : self.name.split(/\\./).pop()\n\n    dom.h('Usage', function() {\n      dom.code(function() {\n        if (self.constructor) {\n          dom.text('new ');\n        }\n        dom.text(name.split(':').pop());\n        dom.text('(');\n        self.parameters(dom, ', ');\n        dom.text(');');\n      });\n\n      self.html_usage_parameters(dom);\n      self.html_usage_this(dom);\n      self.html_usage_returns(dom);\n    });\n    this.method_properties_events(dom);\n  },\n\n  html_usage_property: function(dom){\n    var self = this;\n    dom.h('Usage', function() {\n      dom.code(function() {\n        dom.text(self.name.split(':').pop());\n      });\n\n      self.html_usage_returns(dom);\n    });\n  },\n\n  html_usage_directive: function(dom){\n    var self = this;\n    dom.h('Usage', function() {\n      var restrict = self.restrict || 'A';\n\n      /*\n      if (restrict.match(/E/)) {\n        dom.html('<p>');\n        dom.text('This directive can be used as custom element, but be aware of ');\n        dom.tag('a', {href:'guide/ie'}, 'IE restrictions');\n        dom.text('.');\n        dom.html('</p>');\n      }\n      */\n\n      if (self.usage) {\n        dom.code(function() {\n          dom.text(self.usage);\n        });\n      } else {\n        if (restrict.match(/E/)) {\n          dom.text('as element:');\n          dom.code(function() {\n            dom.text('<');\n            dom.text(dashCase(self.shortName));\n            renderParams('\\n       ', '=\"', '\"');\n            dom.text('>\\n</');\n            dom.text(dashCase(self.shortName));\n            dom.text('>');\n          });\n        }\n        if (restrict.match(/A/)) {\n          var element = self.element || 'ANY';\n          dom.text('as attribute');\n          dom.code(function() {\n            dom.text('<' + element + ' ');\n            dom.text(dashCase(self.shortName));\n            renderParams('\\n     ', '=\"', '\"', true);\n            dom.text('>\\n   ...\\n');\n            dom.text('</' + element + '>');\n          });\n        }\n        if (restrict.match(/C/)) {\n          dom.text('as class');\n          var element = self.element || 'ANY';\n          dom.code(function() {\n            dom.text('<' + element + ' class=\"');\n            dom.text(dashCase(self.shortName));\n            renderParams(' ', ': ', ';', true);\n            dom.text('\">\\n   ...\\n');\n            dom.text('</' + element + '>');\n          });\n        }\n      }\n      self.html_usage_directiveInfo(dom);\n      self.html_usage_parameters(dom);\n    });\n\n    self.method_properties_events(dom);\n\n    function renderParams(prefix, infix, suffix, skipSelf) {\n      (self.param||[]).forEach(function(param) {\n        var skip = skipSelf && (param.name == self.shortName || param.name.indexOf(self.shortName + '|') == 0);\n        if (!skip) {\n          dom.text(prefix);\n          dom.text(param.optional ? '[' : '');\n          var parts = param.name.split('|');\n          dom.text(dashCase(parts[skipSelf ? 0 : 1] || parts[0]));\n        }\n        if (BOOLEAN_ATTR[param.name]) {\n          dom.text(param.optional ? ']' : '');\n        } else {\n          dom.text(BOOLEAN_ATTR[param.name] ? '' : infix );\n          dom.text(('{' + param.type + '}').replace(/^\\{\\'(.*)\\'\\}$/, '$1'));\n          dom.text(suffix);\n          dom.text(param.optional && !skip ? ']' : '');\n        }\n      });\n    }\n\n  },\n\n  html_usage_filter: function(dom){\n    var self = this;\n    dom.h('Usage', function() {\n      dom.h('In HTML Template Binding', function() {\n        dom.tag('code', function() {\n          if (self.usage) {\n            dom.text(self.usage);\n          } else {\n            dom.text('{{ ');\n            dom.text(self.shortName);\n            dom.text('_expression | ');\n            dom.text(self.shortName);\n            self.parameters(dom, ':', true);\n            dom.text(' }}');\n          }\n        });\n      });\n\n      dom.h('In JavaScript', function() {\n        dom.tag('code', function() {\n          dom.text('$filter(\\'');\n          dom.text(self.shortName);\n          dom.text('\\')(');\n          self.parameters(dom, ', ');\n          dom.text(')');\n        });\n      });\n\n      self.html_usage_parameters(dom);\n      self.html_usage_this(dom);\n      self.html_usage_returns(dom);\n    });\n  },\n\n  html_usage_inputType: function(dom){\n    var self = this;\n    dom.h('Usage', function() {\n      dom.code(function() {\n        dom.text('<input type=\"' + self.shortName + '\"');\n        (self.param||[]).forEach(function(param){\n          dom.text('\\n      ');\n          dom.text(param.optional ? ' [' : ' ');\n          dom.text(dashCase(param.name));\n          dom.text(BOOLEAN_ATTR[param.name] ? '' : '=\"{' + param.type + '}\"');\n          dom.text(param.optional ? ']' : '');\n        });\n        dom.text('>');\n      });\n      self.html_usage_parameters(dom);\n    });\n  },\n\n  html_usage_directiveInfo: function(dom) {\n    var self = this;\n    var list = [];\n\n\n    if (self.scope !== undefined) {\n      list.push('This directive creates new scope.');\n    }\n    if (self.priority !== undefined) {\n      list.push('This directive executes at priority level ' + self.priority + '.');\n    }\n\n    if (list.length) {\n      dom.h('Directive info', function() {\n        dom.ul(list);\n      });\n    }\n  },\n\n  html_usage_overview: function(dom){\n    dom.html(this.description);\n  },\n\n  html_usage_error: function (dom) {\n    dom.html();\n  },\n\n  html_usage_interface: function(dom){\n    var self = this;\n\n    if (this.param.length) {\n      dom.h('Usage', function() {\n        dom.code(function() {\n          dom.text(self.name.split('.').pop().split(':').pop());\n          dom.text('(');\n          self.parameters(dom, ', ');\n          dom.text(');');\n        });\n\n        self.html_usage_parameters(dom);\n        self.html_usage_this(dom);\n        self.html_usage_returns(dom);\n      });\n    }\n    this.method_properties_events(dom);\n  },\n\n  html_usage_service: function(dom) {\n    this.html_usage_interface(dom)\n  },\n\n  html_usage_object: function(dom) {\n    this.html_usage_interface(dom)\n  },\n\n  html_usage_controller: function(dom) {\n    this.html_usage_interface(dom)\n  },\n\n  method_properties_events: function(dom) {\n    var self = this;\n    if (self.methods.length) {\n      dom.div({class:'member method'}, function(){\n        dom.h('Methods', self.methods, function(method){\n          //filters out .IsProperty parameters from the method signature\n          var signature = (method.param || []).filter(function(e) { return e.isProperty !== true; }).map(property('name'));\n          dom.h(method.shortName + '(' + signature.join(', ') + ')', method, function() {\n            dom.html(method.description);\n            method.html_usage_parameters(dom);\n            self.html_usage_this(dom);\n            method.html_usage_returns(dom);\n\n            dom.h('Example', method.example, dom.html);\n          });\n        });\n      });\n    }\n    if (self.properties.length) {\n      dom.div({class:'member property'}, function(){\n        dom.h('Properties', self.properties, function(property){\n          dom.h(property.shortName, function() {\n            dom.html(property.description);\n            if (!property.html_usage_returns) {\n              console.log(property);\n            }\n            property.html_usage_returns(dom);\n            dom.h('Example', property.example, dom.html);\n          });\n        });\n      });\n    }\n    if (self.events.length) {\n      dom.div({class:'member event'}, function(){\n        dom.h('Events', self.events, function(event){\n          dom.h(event.shortName, event, function() {\n            dom.html(event.description);\n            if (event.type == 'listen') {\n              dom.tag('div', {class:'inline'}, function() {\n                dom.h('Listen on:', event.target);\n              });\n            } else {\n              dom.tag('div', {class:'inline'}, function() {\n                dom.h('Type:', event.type);\n              });\n              dom.tag('div', {class:'inline'}, function() {\n                dom.h('Target:', event.target);\n              });\n            }\n            event.html_usage_parameters(dom);\n            self.html_usage_this(dom);\n\n            dom.h('Example', event.example, dom.html);\n          });\n        });\n      });\n    }\n  },\n\n  parameters: function(dom, separator, skipFirst, prefix) {\n    var sep = prefix ? separator : '';\n    (this.param||[]).forEach(function(param, i){\n      if (!(skipFirst && i==0)) {\n        if (param.isProperty) { return; }\n        if (param.optional) {\n          dom.text('[' + sep + param.name + ']');\n        } else {\n          dom.text(sep + param.name);\n        }\n      }\n      sep = separator;\n    });\n  }\n\n};\n//////////////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////////////\nvar GLOBALS = /^angular\\.([^\\.]+)$/,\n    MODULE = /^([^\\.]+)$/,\n    MODULE_MOCK = /^angular\\.mock\\.([^\\.]+)$/,\n    MODULE_CONTROLLER = /^(.+)\\.controllers?:([^\\.]+)$/,\n    MODULE_DIRECTIVE = /^(.+)\\.directives?:([^\\.]+)$/,\n    MODULE_DIRECTIVE_INPUT = /^(.+)\\.directives?:input\\.([^\\.]+)$/,\n    MODULE_CUSTOM = /^(.+)\\.([^\\.]+):([^\\.]+)$/,\n    MODULE_SERVICE = /^(.+)\\.([^\\.]+?)(Provider)?$/,\n    MODULE_TYPE = /^([^\\.]+)\\..+\\.([A-Z][^\\.]+)$/;\n\n\nfunction title(doc) {\n  if (!doc.name) return doc.name;\n  var match,\n      module = doc.moduleName,\n      overview = doc.ngdoc == 'overview',\n      text = doc.name;\n\n  var makeTitle = function (name, type, componentType, component) {\n    if (!module) {\n      module = component;\n      if (module == 'angular') {\n          module = 'ng';\n      }\n      doc.moduleName = module;\n    }\n    // Makes title markup.\n    // makeTitle('Foo', 'directive', 'module', 'ng') ->\n    //    Foo is a directive in module ng\n    return function () {\n      this.tag('code', name);\n      this.tag('div', function () {\n        this.tag('span', {class: 'hint'}, function () {\n          if (type && component) {\n            this.text(type + ' in ' + componentType + ' ');\n            this.tag('code', component);\n          }\n        });\n      });\n    };\n  };\n\n  if (doc.ngdoc === 'error') {\n    return makeTitle(doc.fullName, 'error', 'component', doc.getMinerrNamespace());\n  } else if (text == 'angular.Module') {\n    return makeTitle('Module', 'Type', 'module', 'ng');\n  } else if (match = text.match(GLOBALS)) {\n    return makeTitle('angular.' + match[1], 'API', 'module', 'ng');\n  } else if (match = text.match(MODULE)) {\n    return makeTitle(overview ? '' : match[1], '', 'module', match[1]);\n  } else if (match = text.match(MODULE_MOCK)) {\n    return makeTitle('angular.mock.' + match[1], 'API', 'module', 'ng');\n  } else if (match = text.match(MODULE_CONTROLLER) && doc.type === 'controller') {\n    return makeTitle(match[2], 'controller', 'module', match[1]);\n  } else if (match = text.match(MODULE_DIRECTIVE)) {\n    return makeTitle(match[2], 'directive', 'module', match[1]);\n  } else if (match = text.match(MODULE_DIRECTIVE_INPUT)) {\n    return makeTitle('input [' + match[2] + ']', 'directive', 'module', match[1]);\n  } else if (match = text.match(MODULE_CUSTOM)) {\n    return makeTitle(match[3], doc.ngdoc || match[2], 'module', match[1]);\n  } else if (match = text.match(MODULE_TYPE) && doc.ngdoc === 'type') {\n    return makeTitle(match[2], 'type', 'module', module || match[1]);\n  } else if (match = text.match(MODULE_SERVICE)) {\n    if (overview) {\n      // module name with dots looks like a service\n      return makeTitle('', '', 'module', text);\n    }\n    return makeTitle(match[2] + (match[3] || ''), 'service', 'module', module || match[1]);\n  }\n  return text;\n}\n\n\nfunction scenarios(docs){\n  var specs = [];\n\n  specs.push('describe(\"angular+jqlite\", function() {');\n  appendSpecs('index-nocache.html#!/');\n  specs.push('});');\n\n  specs.push('');\n  specs.push('');\n\n  specs.push('describe(\"angular+jquery\", function() {');\n  appendSpecs('index-jq-nocache.html#!/');\n  specs.push('});');\n\n  return specs.join('\\n');\n\n  function appendSpecs(urlPrefix) {\n    docs.forEach(function(doc){\n      specs.push('  describe(\"' + doc.section + '/' + doc.id + '\", function() {');\n      specs.push('    beforeEach(function() {');\n      specs.push('      browser().navigateTo(\"' + urlPrefix + doc.section + '/' + doc.id + '\");');\n      specs.push('    });');\n      specs.push('  ');\n      doc.scenarios.forEach(function(scenario){\n        specs.push(indentCode(trim(scenario), 4));\n        specs.push('');\n      });\n      specs.push('});');\n      specs.push('');\n    });\n  }\n}\n\n\n//////////////////////////////////////////////////////////\nfunction metadata(docs){\n  var pages = [];\n  docs.forEach(function(doc){\n    var path = (doc.name || '').split(/(\\:\\s*)/);\n    for ( var i = 1; i < path.length; i++) {\n      path.splice(i, 1);\n    }\n    var shortName = path.pop().trim();\n\n    if (path.pop() == 'input') {\n      shortName = 'input [' + shortName + ']';\n    }\n\n    pages.push({\n      section: doc.section,\n      id: doc.id,\n      name: title(doc),\n      shortName: shortName,\n      type: doc.ngdoc,\n      moduleName: doc.moduleName,\n      shortDescription: doc.shortDescription(),\n      keywords: doc.keywords()\n    });\n  });\n  pages.sort(sidebarSort);\n  return pages;\n}\n\nvar KEYWORD_PRIORITY = {\n  '.index': 1,\n  '.overview': 1,\n  '.bootstrap': 2,\n  '.mvc': 3,\n  '.scopes': 4,\n  '.compiler': 5,\n  '.templates': 6,\n  '.services': 7,\n  '.di': 8,\n  '.unit-testing': 9,\n  '.dev_guide': 9,\n  '.dev_guide.overview': 1,\n  '.dev_guide.bootstrap': 2,\n  '.dev_guide.bootstrap.auto_bootstrap': 1,\n  '.dev_guide.bootstrap.manual_bootstrap': 2,\n  '.dev_guide.mvc': 3,\n  '.dev_guide.mvc.understanding_model': 1,\n  '.dev_guide.mvc.understanding_controller': 2,\n  '.dev_guide.mvc.understanding_view': 3,\n  '.dev_guide.scopes': 4,\n  '.dev_guide.scopes.understanding_scopes': 1,\n  '.dev_guide.scopes.internals': 2,\n  '.dev_guide.compiler': 5,\n  '.dev_guide.templates': 6,\n  '.dev_guide.services': 7,\n  '.dev_guide.di': 8,\n  '.dev_guide.unit-testing': 9\n};\n\nvar GUIDE_PRIORITY = [\n  'introduction',\n  'overview',\n  'concepts',\n  'dev_guide.mvc',\n\n  'dev_guide.mvc.understanding_controller',\n  'dev_guide.mvc.understanding_model',\n  'dev_guide.mvc.understanding_view',\n\n  'dev_guide.services.understanding_services',\n  'dev_guide.services.managing_dependencies',\n  'dev_guide.services.creating_services',\n  'dev_guide.services.injecting_controllers',\n  'dev_guide.services.testing_services',\n  'dev_guide.services.$location',\n  'dev_guide.services',\n\n  'databinding',\n  'dev_guide.templates.css-styling',\n  'dev_guide.templates.filters.creating_filters',\n  'dev_guide.templates.filters',\n  'dev_guide.templates.filters.using_filters',\n  'dev_guide.templates',\n\n  'di',\n  'providers',\n  'module',\n  'scope',\n  'expression',\n  'bootstrap',\n  'directive',\n  'compiler',\n\n  'forms',\n  'animations',\n\n  'dev_guide.e2e-testing',\n  'dev_guide.unit-testing',\n\n  'i18n',\n  'ie',\n  'migration',\n];\n\nfunction sidebarSort(a, b){\n  priorityA = GUIDE_PRIORITY.indexOf(a.id);\n  priorityB = GUIDE_PRIORITY.indexOf(b.id);\n\n  if (priorityA > -1 || priorityB > -1) {\n    return priorityA < priorityB ? -1 : (priorityA > priorityB ? 1 : 0);\n  }\n\n  function mangleName(doc) {\n    var path = doc.id.split(/\\./);\n    var mangled = [];\n    var partialName = '';\n    path.forEach(function(name){\n      partialName += '.' + name;\n      mangled.push(KEYWORD_PRIORITY[partialName] || 5);\n      mangled.push(name);\n    });\n    return (doc.section + '/' + mangled.join('.')).toLowerCase();\n  }\n  var nameA = mangleName(a);\n  var nameB = mangleName(b);\n  return nameA < nameB ? -1 : (nameA > nameB ? 1 : 0);\n}\n\n\n//////////////////////////////////////////////////////////\nfunction trim(text) {\n  var MAX_INDENT = 9999;\n  var empty = RegExp.prototype.test.bind(/^\\s*$/);\n  var lines = text.split('\\n');\n  var minIndent = MAX_INDENT;\n  var indentRegExp;\n  var ignoreLine = (lines[0][0] != ' '  && lines.length > 1);\n  // ignore first line if it has no indentation and there is more than one line\n\n  lines.forEach(function(line){\n    if (ignoreLine) {\n      ignoreLine = false;\n      return;\n    }\n\n    var indent = line.match(/^\\s*/)[0].length;\n    if (indent > 0 || minIndent == MAX_INDENT) {\n      minIndent = Math.min(minIndent, indent);\n    }\n  });\n\n  indentRegExp = new RegExp('^\\\\s{0,' + minIndent + '}');\n\n  for ( var i = 0; i < lines.length; i++) {\n    lines[i] = lines[i].replace(indentRegExp, '');\n  }\n\n  // remove leading lines\n  while (empty(lines[0])) {\n    lines.shift();\n  }\n\n  // remove trailing\n  while (empty(lines[lines.length - 1])) {\n    lines.pop();\n  }\n  return lines.join('\\n');\n}\n\nfunction indentCode(text, spaceCount) {\n  var lines = text.split('\\n'),\n    indent = '',\n    fixedLines = [];\n\n  while(spaceCount--) indent += ' ';\n\n  lines.forEach(function(line) {\n    fixedLines.push(indent + line);\n  });\n\n  return fixedLines.join('\\n');\n}\n\n//////////////////////////////////////////////////////////\nfunction merge(docs){\n  var byFullId = {};\n\n  docs.forEach(function(doc) {\n    byFullId[doc.section + '/' + doc.id] = doc;\n  });\n\n  for(var i = 0; i < docs.length;) {\n    if (findParent(docs[i], 'method') || findParent(docs[i], 'property') || findParent(docs[i], 'event')) {\n      docs.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n\n  function findParent(doc, name) {\n    var parentName = doc[name + 'Of'];\n    if (!parentName) return false;\n\n    var parent = byFullId[doc.section + '/' + parentName];\n    if (!parent)\n      throw new Error(\"No parent named '\" + parentName + \"' for '\" +\n        doc.name + \"' in @\" + name + \"Of.\");\n\n    var listName = (name + 's').replace(/ys$/, 'ies');\n    var list = parent[listName] = (parent[listName] || []);\n    list.push(doc);\n    list.sort(orderByName);\n    return true;\n  }\n\n  function orderByName(a, b){\n    return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\n  }\n}\n//////////////////////////////////////////////////////////\n\n\nfunction checkBrokenLinks(docs, apis, options) {\n  var byFullId = Object.create(null);\n\n  docs.forEach(function(doc) {\n    byFullId[doc.section + '/' + doc.id] = doc;\n    if (apis[doc.section]) {\n      doc.anchors.push('directive', 'service', 'filter', 'function');\n    }\n  });\n\n  docs.forEach(function(doc) {\n    doc.links.forEach(function(link) {\n      if (options && !options.html5Mode) {\n        link = link.substring(2);\n      }\n      // convert #id to path#id\n      if (link[0] == '#') {\n        link = doc.section + '/' + doc.id.split('#').shift() + link;\n      }\n\n      var parts = link.split('#');\n      var pageLink = parts[0];\n      var anchorLink = parts[1];\n      var linkedPage = byFullId[pageLink];\n\n      if (!linkedPage) {\n        console.log('WARNING: ' + doc.section + '/' + doc.id + ' (defined in ' + doc.file + ') points to a non existing page \"' + link + '\"!');\n      } else if (anchorLink && linkedPage.anchors.indexOf(anchorLink) === -1) {\n        console.log('WARNING: ' + doc.section + '/' + doc.id + ' (defined in ' + doc.file + ') points to a non existing anchor \"' + link + '\"!');\n      }\n    });\n  });\n}\n\n\nfunction property(name) {\n  return function(value){\n    return value[name];\n  };\n}\n\n\nvar DASH_CASE_REGEXP = /[A-Z]/g;\nfunction dashCase(name){\n  return name.replace(DASH_CASE_REGEXP, function(letter, pos) {\n    return (pos ? '-' : '') + letter.toLowerCase();\n  });\n}\n//////////////////////////////////////////////////////////\n\nfunction explainModuleInstallation(moduleName){\n  var ngMod = ngModule(moduleName),\n    modulePackage = 'angular-' + moduleName,\n    modulePackageFile = modulePackage + '.js';\n\n  return '<h1>Installation</h1>' +\n    '<p>First include <code>' + modulePackageFile +'</code> in your HTML:</p><pre><code>' +\n    '    &lt;script src=&quot;angular.js&quot;&gt;\\n' +\n    '    &lt;script src=&quot;' + modulePackageFile + '&quot;&gt;</pre></code>' +\n\n    '<p>You can download this file from the following places:</p>' +\n    '<ul>' +\n      '<li>[Google CDN](https://developers.google.com/speed/libraries/devguide#angularjs)<br>' +\n        'e.g. <code>\"//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/' + modulePackageFile + '\"</code></li>' +\n      '<li>[Bower](http://bower.io)<br>' +\n       'e.g. <code>bower install ' + modulePackage + '@X.Y.Z</code></li>' +\n      '<li><a href=\"http://code.angularjs.org/\">code.angularjs.org</a><br>' +\n        'e.g. <code>\"//code.angularjs.org/X.Y.Z/' + modulePackageFile + '\"</code></li>' +\n    '</ul>' +\n    '<p>where X.Y.Z is the AngularJS version you are running.</p>' +\n    '<p>Then load the module in your application by adding it as a dependent module:</p><pre><code>' +\n    '    angular.module(\\'app\\', [\\'' + ngMod + '\\']);</pre></code>' +\n\n    '<p>With that you\\'re ready to get started!</p>';\n}\n\nfunction ngModule(moduleName) {\n  return 'ng' + moduleName[0].toUpperCase() + moduleName.substr(1);\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/node_modules/gulp-ngdocs/src/example.js":"var seqCount = 0;\nvar usedIds = {};\nvar makeUnique = {\n  'index.html': true,\n  'style.css': true,\n  'script.js': true,\n  'unit.js': true,\n  'spec.js': true,\n  'scenario.js': true\n}\n\nfunction ids(list) {\n  return list.map(function(item) { return item.id; }).join(' ');\n};\n\n\nexports.Example = function(scenarios) {\n  this.module = '';\n  this.deps = ['angular.js'];\n  this.html = [];\n  this.css = [];\n  this.js = [];\n  this.json = [];\n  this.unit = [];\n  this.scenario = [];\n  this.scenarios = scenarios;\n}\n\nexports.Example.prototype.setModule = function(module) {\n  if (module) {\n    this.module = module;\n  }\n};\n\nexports.Example.prototype.addDeps = function(deps) {\n  deps && deps.split(/[\\s\\,]/).forEach(function(dep) {\n    if (dep) {\n      this.deps.push(dep);\n    }\n  }, this);\n};\n\nexports.Example.prototype.addSource = function(name, content) {\n  var ext = name == 'scenario.js' ? 'scenario' : name.split('.')[1],\n      id = name;\n\n  if (makeUnique[name] && usedIds[id]) {\n    id = name + '-' + (seqCount++);\n  }\n  usedIds[id] = true;\n  \n  this[ext].push({name: name, content: content, id: id});\n  if (name.match(/\\.js$/) && name !== 'spec.js' && name !== 'unit.js' && name != 'scenario.js') {\n    this.deps.push(name);\n  }\n  if (ext == 'scenario') {\n    this.scenarios.push(content);\n  }\n};\n\nexports.Example.prototype.enableAnimations = function() {\n  this.animations = true;\n};\n\nexports.Example.prototype.disableAnimations = function() {\n  this.animations = false;\n};\n\nexports.Example.prototype.toHtml = function() {\n  var html = \"<h2>Source</h2>\\n\";\n  html += this.toHtmlEdit();\n  html += this.toHtmlTabs();\n  if(this.animations) {\n    html += '<div class=\"pull-right\">';\n    html += ' <button class=\"btn btn-primary\" ng-click=\"animationsOff=true\" ng-hide=\"animationsOff\">Animations on</button>';\n    html += ' <button class=\"btn btn-primary disabled\" ng-click=\"animationsOff=false\" ng-show=\"animationsOff\">Animations off</button>';\n    html += '</div>';\n  }\n  html += \"<h2>Demo</h2>\\n\";\n  html += this.toHtmlEmbed();\n  return html;\n};\n\n\nexports.Example.prototype.toHtmlEdit = function() {\n  var out = [];\n  out.push('<div source-edit=\"' + this.module + '\"');\n  out.push(' source-edit-deps=\"' + this.deps.join(' ') + '\"');\n  out.push(' source-edit-html=\"' + ids(this.html) + '\"');\n  out.push(' source-edit-css=\"' + ids(this.css) + '\"');\n  out.push(' source-edit-js=\"' + ids(this.js) + '\"');\n  out.push(' source-edit-json=\"' + ids(this.json) + '\"');\n  out.push(' source-edit-unit=\"' + ids(this.unit) + '\"');\n  out.push(' source-edit-scenario=\"' + ids(this.scenario) + '\"');\n  out.push('></div>\\n');\n  return out.join('');\n};\n\nexports.Example.prototype.toHtmlTabs = function() {\n  var out = [],\n      self = this;\n\n  out.push('<div class=\"tabbable\">');\n  htmlTabs(this.html);\n  htmlTabs(this.css);\n  htmlTabs(this.js);\n  htmlTabs(this.json);\n  htmlTabs(this.unit);\n  htmlTabs(this.scenario);\n  out.push('</div>');\n  return out.join('');\n\n  function htmlTabs(sources) {\n    sources.forEach(function(source) {\n      var wrap = '',\n          isCss = source.name.match(/\\.css$/),\n          name = source.name;\n\n      if (name === 'index.html') {\n        wrap = ' ng-html-wrap-loaded=\"' + self.module + ' ' + self.deps.join(' ') + '\"';\n      }\n      if (name == 'scenario.js') name = 'End to end test';\n\n      out.push(\n        '<div class=\"tab-pane\" title=\"' + name + '\">\\n' +\n          '<pre class=\"prettyprint linenums\" ng-set-text=\"' + source.id + '\"' + wrap + '></pre>\\n' +\n          (isCss\n             ? ('<style type=\"text/css\" id=\"' + source.id + '\">' + source.content + '</style>\\n')\n             : ('<script type=\"text/ng-template\" id=\"' + source.id + '\">' + source.content + '</script>\\n') ) +\n        '</div>\\n');\n    });\n  }\n};\n\nexports.Example.prototype.toHtmlEmbed = function() {\n  var out = [];\n  out.push('<div class=\"well doc-example-live animate-container\"');\n  if(this.animations) {\n    out.push(\" ng-class=\\\"{'animations-off':animationsOff == true}\\\"\");\n  }\n  out.push(' ng-embed-app=\"' + this.module + '\"');\n  out.push(' ng-set-html=\"' + this.html[0].id + '\"');\n  out.push(' ng-eval-javascript=\"' + ids(this.js) + '\">');\n  out.push('</div>');\n  return out.join('');\n};\n\n","/home/travis/build/npmtest/node-npmtest-gulp-ngdocs/node_modules/gulp-ngdocs/src/reader.js":"/**\n * All reading related code here.\n */\n\nexports.docs = [];\nexports.process = process;\n\nvar ngdoc = require('./ngdoc.js'),\n    NEW_LINE = /\\n\\r?/;\n\nfunction process(content, file, section, options) {\n  // console.log('-file-----\\n' + file)\n  // console.log('-section-----\\n' + section)\n  // console.log('-options-----\\n' + JSON.stringify(options, null, 2))\n  // console.log('')\n  if (/\\.js|.ts$/.test(file)) {\n    processJsFile(content, file, section, options).forEach(function(doc) {\n      exports.docs.push(doc);\n    });\n  } else if (file.match(/\\.ngdoc$/)) {\n    var header = '@section ' + section + '\\n';\n    exports.docs.push(new ngdoc.Doc(header + content.toString(),file, 1, options).parse());\n  }\n}\n\nfunction processJsFile(content, file, section, options) {\n  var docs = [];\n  var lines = content.toString().split(NEW_LINE);\n  var text;\n  var startingLine ;\n  var match;\n  var inDoc = false;\n\n  lines.forEach(function(line, lineNumber){\n    lineNumber++;\n    // is the comment starting?\n    if (!inDoc && (match = line.match(/^\\s*\\/\\*\\*\\s*(.*)$/))) {\n      line = match[1];\n      inDoc = true;\n      text = [];\n      startingLine = lineNumber;\n    }\n    // are we done?\n    if (inDoc && line.match(/\\*\\//)) {\n      text = text.join('\\n');\n      text = text.replace(/^\\n/, '');\n      if (text.match(/@ngdoc/)){\n        //console.log(file, startingLine)\n        docs.push(new ngdoc.Doc('@section ' + section + '\\n' + text, file, startingLine, options).parse());\n      }\n      doc = null;\n      inDoc = false;\n    }\n    // is the comment add text\n    if (inDoc){\n      text.push(line.replace(/^\\s*\\*\\s?/, ''));\n    }\n  });\n  return docs;\n}\n"}